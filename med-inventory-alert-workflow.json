{
    "nodes": [
      {
        "parameters": {
          "cronExpression": "0 8 * * *"
        },
        "name": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 8:00",
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "position": [250, 300]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n  d.name AS drug_name,\n  w.name AS warehouse_name,\n  pt.name AS package_type,\n  s.quantity,\n  s.daily_usage,\n  s.threshold\nFROM stock s\nJOIN drugs d ON s.drug_id = d.id\nJOIN warehouses w ON s.warehouse_id = w.id\nJOIN package_types pt ON d.package_type_id = pt.id\nWHERE s.quantity < s.threshold OR (s.daily_usage > 0 AND s.quantity::FLOAT / s.daily_usage < 3);"
        },
        "name": "–ß—Ç–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2,
        "position": [450, 300],
        "credentials": {
          "postgres": "medinventory-db"
        }
      },
      {
        "parameters": {
          "functionCode": "const results = [];\n\nfor (const item of items) {\n  const { drug_name, warehouse_name, package_type, quantity, daily_usage, threshold } = item.json;\n\n  const daysLeft = daily_usage > 0 ? (quantity / daily_usage).toFixed(1) : '‚àû';\n  const isLowStock = quantity < threshold;\n  const isCritical = daily_usage > 0 && quantity / daily_usage < 3;\n\n  if (isLowStock || isCritical) {\n    results.push({\n      json: {\n        ...item.json,\n        days_left: daysLeft,\n        alert_reason: isLowStock && isCritical\n          ? '–Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ + —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è'\n          : isLowStock\n          ? '–æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞'\n          : '–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è'\n      }\n    });\n  }\n}\n\nreturn results;"
        },
        "name": "–ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [650, 300]
      },
      {
        "parameters": {
          "message": "‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ!\n\nüíä –ü—Ä–µ–ø–∞—Ä–∞—Ç: {{$json[\"drug_name\"]}}\nüì¶ –£–ø–∞–∫–æ–≤–∫–∞: {{$json[\"package_type\"]}}\nüè¢ –°–∫–ª–∞–¥: {{$json[\"warehouse_name\"]}}\nüî¢ –û—Å—Ç–∞—Ç–æ–∫: {{$json[\"quantity\"]}}\nüìâ –†–∞—Å—Ö–æ–¥: {{$json[\"daily_usage\"]}}/–¥–µ–Ω—å\n‚è≥ –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: {{$json[\"days_left\"]}} –¥–Ω–µ–π\n‚ùó –ü—Ä–∏—á–∏–Ω–∞: {{$json[\"alert_reason\"]}}\n\nüëâ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!",
          "additionalFields": {
            "chatId": "YOUR_TELEGRAM_CHAT_ID"
          }
        },
        "name": "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram",
        "type": "n8n-nodes-base.telegram",
        "typeVersion": 1,
        "position": [850, 300],
        "credentials": {
          "telegramApi": "telegram-bot"
        }
      }
    ],
    "connections": {
      "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 8:00": {
        "main": [
          [
            {
              "node": "–ß—Ç–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "–ß—Ç–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î": {
        "main": [
          [
            {
              "node": "–ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "–ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "main": [
          [
            {
              "node": "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    }
  }